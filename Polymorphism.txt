Destructor's undefined behavior without using a virtual destructor.

#include<iostream>  
using namespace std;  
class Base  
{                              
    public: /* A public access specifier defines Constructor and Destructor function to call by any object in the class. */  
    Base() // Constructor function.   
{  
    cout<< "\n Constructor Base class";  
}  
~Base() // Destructor function   
{  
    cout<< "\n Destructor Base class";
}  };  
class Derived: public Base  
{  
    public: /* A public access specifier defines Constructor and Destructor function to call by any object in the class. */  
    Derived() // Constructor function   
{  cout << "\n Constructor Derived class" ;  }
 ~Derived() // Destructor function   
{  cout << "\n Destructor Derived class" ; /* Destructor function is not called to release its space. */  
} };  
  
